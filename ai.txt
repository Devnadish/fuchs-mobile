
import { Redirect } from "expo-router";
import { useEffect, useState } from "react";
import { useUserAuth } from "../provider/userAuth/userAuthProvider";

export default function Index() {
  const { isLogin } = useUserAuth(); // Access the authentication context
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    console.log("isLogin from context:", isLogin); // Debug log
    setLoading(false); // Set loading to false once data is ready
  }, [isLogin]);

  if (loading) {
    console.log("Loading...");
    return null; // You can replace this with a loading spinner if desired
  }

  if (isLogin) {
    return <Redirect href="/(home)/home" />;
  }

  return <Redirect href="/(auth)/home" />;
}

this is my index file

import React, {
  createContext,
  useEffect,
  useState,
  useMemo,
  useContext,
} from "react";
import AsyncStorage from "@react-native-async-storage/async-storage";

export const userAuthContext = createContext(null);

export const UserAuthProvider = ({ children }) => {
  const [userData, setUserData] = useState({
    isLogin: false,
    userName: "khalid test",
    userEmail: "",
    userMobile: "",
    userAvatar: "",
    userCar: "",
    userCarModel: "",
    userCarYear: "",
    userLanguage: "en",
    userTheme: "dark",
  });
  const [test, setTest] = useState("khalid");

  console.log(JSON.stringify(userData, null, 2));

  // Check login status and update state if user data exists
  useEffect(() => {
    const checkLoginStatus = async () => {
      const storedUserData = await AsyncStorage.getItem("userData");
      console.log("Stored User Data:", storedUserData); // Log the retrieved data
      if (storedUserData) {
        const parsedUserData = JSON.parse(storedUserData);
        console.log("Parsed User Data:", parsedUserData); // Log the parsed data
        await setUserData((prevData) => ({
          ...prevData,
          ...parsedUserData,
          isLogin: true, // Set isLogin to true if user data is found
        }));
      }
    };

    checkLoginStatus(); // Call the function here
  }, []);

  const loginFunction = async (newUserData) => {
    console.log("Logging in with:", newUserData); // Log the new user data
    await AsyncStorage.setItem("userData", JSON.stringify(newUserData));
    setUserData({ ...newUserData, isLogin: true }); // Ensure isLogin is true
  };

  const contextValue = useMemo(
    () => ({
      ...userData,
      loginFunction,
      test,
      setTest,
    }),
    [userData, test] // Include test in the dependency array
  );

  return (
    <userAuthContext.Provider value={contextValue}>
      {children}
    </userAuthContext.Provider>
  );
};

// Custom hook for using the userAuthContext
export const useUserAuth = () => {
  const context = useContext(userAuthContext);
  if (!context) {
    throw new Error("useUserAuth must be used within a UserAuthProvider");
  }
  return context;
};
 this my provider  why when i call isLogin from this index it give false but should be true 

 import "react-native-gesture-handler";
import React from "react";
import { Stack } from "expo-router";
import { LanguageProvider } from "../provider/languageProvider/languageProvider";
import { GestureHandlerRootView } from "react-native-gesture-handler";
import { carBarStyle, indexBarStyle } from "../constants/headerBarStyle";
import { pingServer, showToast } from "../lib/nadish";
import Toast from "react-native-toast-message";
import { ThemeProvider } from "../provider/themeProvider/useThemProvider";
import { UserAuthProvider } from "../provider/userAuth/userAuthProvider";

const RootLayout = () => {
  const check = pingServer();
  check
    ? showToast("Server is reachable and responsive")
    : showToast("Server is not reachable or unresponsive");

  return (
    <GestureHandlerRootView style={{ flex: 1 }}>
      {/* Ensure this wraps everything */}
      <UserAuthProvider>
        <ThemeProvider>
          <LanguageProvider>
            <Stack>
              <Stack.Screen name="index" options={indexBarStyle} />
              {/* <Stack.Screen name="selectcar" options={carBarStyle} /> */}
              <Stack.Screen name="(auth)" options={{ headerShown: false }} />
              <Stack.Screen name="(home)" options={{ headerShown: false }} />
              <Stack.Screen name="(profile)" options={{ headerShown: false }} />
              <Stack.Screen name="(screens)" options={{ headerShown: false }} />
            </Stack>
          </LanguageProvider>
        </ThemeProvider>
        <Toast position="top" topOffset={50} visibilityTime={2000} />
      </UserAuthProvider>
    </GestureHandlerRootView>
  );
};

export default RootLayout;
this where i wrap the provider for all the app